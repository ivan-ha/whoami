{"version":3,"sources":["Components/IconLink.tsx","Components/Title.tsx","Components/FindMeOn.tsx","Components/Introduction.tsx","Components/Menu.tsx","Components/Button.tsx","Components/WhoAmI.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Image","styled","img","_templateObject","props","small","IconLink","_ref","src","href","react_default","a","createElement","target","rel","StyledH3","h3","Title_templateObject","Title","text","data","IconWrapper","div","FindMeOn_templateObject","FindMeOn","className","Components_Title","map","item","Components_IconLink","Object","assign","key","Tag","Introduction_templateObject","background","TagWrapper","_templateObject2","tagList","Introduction","tag","randomColor","luminosity","StyledMenu","ul","Menu_templateObject","StyledItem","li","Menu_templateObject2","noHover","StyledLink","_templateObject3","Menu","id","menuId","items","data-menuanchor","anchor","concat","StyledButton","button","Button_templateObject","Button","onClick","whoAmI","onButtonClick","Components_Button","fullpageOptions","anchors","sectionsColor","navigation","menu","menuItems","App","Fragment","Components_Menu","react_fullpage_default","render","fullpageApi","WhoAmI","moveSectionDown","Components_Introduction","Components_FindMeOn","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wUAeA,IAAMA,EAAQC,IAAOC,IAAVC,IACC,SAACC,GAAD,OAAwBA,EAAMC,MAAQ,OAAS,QAC/C,SAACD,GAAD,OAAwBA,EAAMC,MAAQ,WAAa,UAShDC,EANE,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,IAAKC,EAARF,EAAQE,KAAMJ,EAAdE,EAAcF,MAAd,OACfK,EAAAC,EAAAC,cAAA,KAAGH,KAAMA,EAAMI,OAAO,SAASC,IAAI,uBACjCJ,EAAAC,EAAAC,cAACZ,EAAD,CAAOQ,IAAKA,EAAKH,MAAOA,4JCf5B,IAAMU,EAAWd,IAAOe,GAAVC,KASCC,EAFD,SAAAX,GAAA,IAAGY,EAAHZ,EAAGY,KAAH,OAAyBT,EAAAC,EAAAC,cAACG,EAAD,KAAWI,yHCRlD,IAAMC,EAAO,CACX,CACEZ,IAAK,qBACLC,KAAM,8BAER,CACED,IAAK,uBACLC,KAAM,uCAER,CACED,IAAK,qBACLC,KAAM,+BAER,CACED,IAAK,sBACLC,KAAM,iCAIJY,EAAcpB,IAAOqB,IAAVC,KAgBFC,EAXE,kBACfd,EAAAC,EAAAC,cAAA,OAAKa,UAAU,WACbf,EAAAC,EAAAC,cAACc,EAAD,CAAOP,KAAK,eACZT,EAAAC,EAAAC,cAACS,EAAD,KACGD,EAAKO,IAAI,SAAAC,GAAI,OACZlB,EAAAC,EAAAC,cAACiB,EAADC,OAAAC,OAAA,GAAcH,EAAd,CAAoBI,IAAKJ,EAAKpB,2eCzBtC,IAAMyB,EAAMhC,IAAOqB,IAAVY,IACO,SAAC9B,GAAD,OAAqBA,EAAM+B,aAgBrCC,EAAanC,IAAOqB,IAAVe,KAKVC,EAAU,CACd,kBACA,WACA,aACA,aACA,OACA,QACA,eACA,UACA,QACA,aACA,eACA,WACA,oBACA,YACA,OACA,QACA,SACA,MACA,QACA,cACA,cACA,WACA,SACA,aAgBaC,EAbM,kBACnB7B,EAAAC,EAAAC,cAAA,OAAKa,UAAU,WACbf,EAAAC,EAAAC,cAACc,EAAD,CAAOP,KAAK,cACZT,EAAAC,EAAAC,cAACwB,EAAD,KACGE,EAAQX,IAAI,SAAAa,GAAG,OACd9B,EAAAC,EAAAC,cAACqB,EAAD,CAAKD,IAAKQ,EAAKL,WAAYM,IAAY,CAAEC,WAAY,WAClDF,suBC5DX,IAAMG,EAAa1C,IAAO2C,GAAVC,KAcVC,EAAa7C,IAAO8C,GAAVC,IAiBE,SAAC5C,GAAD,OACZA,EAAM6C,QAAU,GAAK,oBAQrBC,EAAajD,IAAOU,EAAVwC,KA6BDC,EAjBF,SAAChD,GAAD,OACXM,EAAAC,EAAAC,cAAC+B,EAAD,CAAYU,GAAIjD,EAAMkD,QACnBlD,EAAMmD,MAAM5B,IAAI,SAAAC,GAAI,OACnBlB,EAAAC,EAAAC,cAACkC,EAAD,CAAYU,kBAAiB5B,EAAK6B,OAAQzB,IAAKJ,EAAK6B,QAClD/C,EAAAC,EAAAC,cAACsC,EAAD,CAAYzC,KAAI,IAAAiD,OAAM9B,EAAK6B,SAAW7B,EAAKT,SAG/CT,EAAAC,EAAAC,cAACkC,EAAD,CAAYG,SAAO,GACjBvC,EAAAC,EAAAC,cAACiB,EAAD,CACErB,IAAI,qBACJC,KAAK,oCACLJ,OAAK,2WC5Db,IAAMsD,EAAe1D,IAAO2D,OAAVC,KAmBHC,EAJA,SAAAvD,GAAA,IAAGwD,EAAHxD,EAAGwD,QAAS5C,EAAZZ,EAAYY,KAAZ,OACbT,EAAAC,EAAAC,cAAC+C,EAAD,CAAcI,QAASA,GAAU5C,ICRpB6C,EAPA,SAAAzD,GAAA,IAAG0D,EAAH1D,EAAG0D,cAAH,OACbvD,EAAAC,EAAAC,cAAA,OAAKa,UAAU,WACbf,EAAAC,EAAAC,cAACc,EAAD,CAAOP,KAAK,YACZT,EAAAC,EAAAC,cAACsD,EAAD,CAAQH,QAASE,EAAe9C,KAAK,gBCCnCgD,EAAkB,CACtBC,QAAS,CAAC,SAAU,eAAgB,YACpCC,cAAe,CAAC,UAAW,UAAW,WACtCC,YAAY,EACZC,KAAM,SAGFC,EAAY,CAChB,CACEf,OAAQ,SACRtC,KAAM,YAER,CACEsC,OAAQ,eACRtC,KAAM,aAER,CACEsC,OAAQ,WACRtC,KAAM,eAsBKsD,EAlBH,kBACV/D,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+D,SAAA,KACEhE,EAAAC,EAAAC,cAAC+D,EAAD,CAAMrB,OAAO,OAAOC,MAAOiB,IAC3B9D,EAAAC,EAAAC,cAACgE,EAAAjE,EAADmB,OAAAC,OAAA,GACMoC,EADN,CAEEU,OAAQ,SAAAtE,GAA8C,IAA3CuE,EAA2CvE,EAA3CuE,YACT,OACEpE,EAAAC,EAAAC,cAAA,OAAKyC,GAAG,oBACN3C,EAAAC,EAAAC,cAACmE,EAAD,CAAQd,cAAe,kBAAMa,EAAYE,qBACzCtE,EAAAC,EAAAC,cAACqE,EAAD,MACAvE,EAAAC,EAAAC,cAACsE,EAAD,aCjCQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASX,OAAOnE,EAAAC,EAAAC,cAAC6E,EAAD,MAASC,SAASC,eAAe,SDiI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.82d293fc.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\ntype ImageProps = {\n  src: string;\n  small?: boolean;\n};\n\n// FIXME: define type more cleverly\ntype IconLinkProps = {\n  src: string;\n  href: string;\n  small?: boolean;\n};\n\nconst Image = styled.img`\n  height: ${(props: ImageProps) => (props.small ? \"30px\" : \"60px\")};\n  margin: ${(props: ImageProps) => (props.small ? \"-6px 8px\" : \"0 8px\")};\n`;\n\nconst IconLink = ({ src, href, small }: IconLinkProps) => (\n  <a href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n    <Image src={src} small={small} />\n  </a>\n);\n\nexport default IconLink;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ntype PropsType = {\n  text: string;\n};\n\nconst StyledH3 = styled.h3`\n  font-size: 5em;\n  text-align: center;\n  color: #fff;\n  font-weight: 700;\n`;\n\nconst Title = ({ text }: PropsType) => <StyledH3>{text}</StyledH3>;\n\nexport default Title;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport IconLink from \"./IconLink\";\nimport Title from \"./Title\";\n\nconst data = [\n  {\n    src: \"/images/github.svg\",\n    href: \"https://github.com/ivan-ha\",\n  },\n  {\n    src: \"/images/linkedin.svg\",\n    href: \"https://www.linkedin.com/in/ivan-ha\",\n  },\n  {\n    src: \"/images/medium.svg\",\n    href: \"https://medium.com/@ivan.ha\",\n  },\n  {\n    src: \"/images/twitter.svg\",\n    href: \"https://twitter.com/ivanhahk\",\n  },\n];\n\nconst IconWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst FindMeOn = () => (\n  <div className=\"section\">\n    <Title text=\"Find Me On\" />\n    <IconWrapper>\n      {data.map(item => (\n        <IconLink {...item} key={item.src} />\n      ))}\n    </IconWrapper>\n  </div>\n);\n\nexport default FindMeOn;\n","import randomColor from \"randomcolor\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport Title from \"./Title\";\n\ntype TagProps = {\n  background: string;\n};\n\nconst Tag = styled.div`\n  background: ${(props: TagProps) => props.background};\n  border-radius: 4px;\n  color: #0a0a0a;\n  display: inline-block;\n  font-size: 20px;\n  font-weight: 400;\n  height: 30px;\n  line-height: 28px;\n  list-style: none;\n  margin-right: 8px;\n  margin: 5px;\n  opacity: 1;\n  padding: 2px 10px;\n  white-space: nowrap;\n`;\n\nconst TagWrapper = styled.div`\n  margin: auto;\n  width: 70%;\n`;\n\nconst tagList = [\n  \"web development\",\n  \"frontend\",\n  \"javascript\",\n  \"typescript\",\n  \"flow\",\n  \"react\",\n  \"react-native\",\n  \"next.js\",\n  \"redux\",\n  \"redux-saga\",\n  \"immutable.js\",\n  \"reselect\",\n  \"styled-components\",\n  \"storybook\",\n  \"jest\",\n  \"ramda\",\n  \"lodash\",\n  \"git\",\n  \"husky\",\n  \"import-sort\",\n  \"lint-staged\",\n  \"prettier\",\n  \"eslint\",\n  \"danger-js\",\n];\n\nconst Introduction = () => (\n  <div className=\"section\">\n    <Title text=\"What I Do\" />\n    <TagWrapper>\n      {tagList.map(tag => (\n        <Tag key={tag} background={randomColor({ luminosity: \"light\" })}>\n          {tag}\n        </Tag>\n      ))}\n    </TagWrapper>\n  </div>\n);\n\nexport default Introduction;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport IconLink from \"./IconLink\";\n\nconst StyledMenu = styled.ul`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  height: 40px;\n  z-index: 70;\n  padding: 0;\n  margin: 0;\n`;\n\ntype StyledItemProps = {\n  noHover?: boolean;\n};\n\nconst StyledItem = styled.li`\n  display: inline-block;\n  font-size: 18px;\n\n  &.active :after {\n    content: \"\";\n    margin: 4px 0;\n    height: 2px;\n    background: #fff;\n    display: block;\n    bottom: -6px;\n    left: 0;\n    right: 0;\n    display: block;\n  }\n\n  &:hover {\n    background: ${(props: StyledItemProps) =>\n      props.noHover ? \"\" : \"rgba(0,0,0,0.3)\"};\n  }\n\n  &.active a {\n    color: #fff;\n  }\n`;\n\nconst StyledLink = styled.a`\n  text-decoration: none;\n  color: #000;\n  padding: 9px 18px;\n  display: block;\n`;\n\ntype MenuProps = {\n  items: { anchor: string; text: string }[];\n  menuId: string;\n};\n\nconst Menu = (props: MenuProps) => (\n  <StyledMenu id={props.menuId}>\n    {props.items.map(item => (\n      <StyledItem data-menuanchor={item.anchor} key={item.anchor}>\n        <StyledLink href={`#${item.anchor}`}>{item.text}</StyledLink>\n      </StyledItem>\n    ))}\n    <StyledItem noHover>\n      <IconLink\n        src=\"/images/github.svg\"\n        href=\"https://github.com/ivan-ha/whoami\"\n        small\n      />\n    </StyledItem>\n  </StyledMenu>\n);\n\nexport default Menu;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ntype PropsType = {\n  onClick: () => void;\n  text: string;\n};\n\nconst StyledButton = styled.button`\n  padding: 0.93em 1.87em;\n  background: #caff45;\n  border-radius: 5px;\n  border-color: transparent;\n  display: block;\n  color: #262626;\n  margin: 0 auto;\n  cursor: pointer;\n  font-size: 16px;\n  font-weight: 500;\n  box-shadow: 0 2px 0 rgba(0, 0, 0, 0.045);\n  outline: none;\n`;\n\nconst Button = ({ onClick, text }: PropsType) => (\n  <StyledButton onClick={onClick}>{text}</StyledButton>\n);\n\nexport default Button;\n","import React from \"react\";\n\nimport Button from \"./Button\";\nimport Title from \"./Title\";\n\ntype PropsType = {\n  onButtonClick: () => void;\n};\n\nconst whoAmI = ({ onButtonClick }: PropsType) => (\n  <div className=\"section\">\n    <Title text=\"Ivan Ha\" />\n    <Button onClick={onButtonClick} text=\"Move down\" />\n  </div>\n);\n\nexport default whoAmI;\n","import ReactFullpage from \"@fullpage/react-fullpage\";\nimport React from \"react\";\n\nimport FindMeOn from \"./Components/FindMeOn\";\nimport Introduction from \"./Components/Introduction\";\nimport Menu from \"./Components/Menu\";\nimport WhoAmI from \"./Components/WhoAmI\";\n\ntype ReactFullPageRenderProp = {\n  state: any;\n  fullpageApi: any;\n};\n\nconst fullpageOptions = {\n  anchors: [\"whoAmI\", \"introduction\", \"findMeOn\"],\n  sectionsColor: [\"#ff5f45\", \"#02ceba\", \"#0798ec\"],\n  navigation: true,\n  menu: \"#menu\",\n};\n\nconst menuItems = [\n  {\n    anchor: \"whoAmI\",\n    text: \"Who Am I\",\n  },\n  {\n    anchor: \"introduction\",\n    text: \"What I Do\",\n  },\n  {\n    anchor: \"findMeOn\",\n    text: \"Find Me On\",\n  },\n];\n\nconst App = () => (\n  <>\n    <Menu menuId=\"menu\" items={menuItems} />\n    <ReactFullpage\n      {...fullpageOptions}\n      render={({ fullpageApi }: ReactFullPageRenderProp) => {\n        return (\n          <div id=\"fullpage-wrapper\">\n            <WhoAmI onButtonClick={() => fullpageApi.moveSectionDown()} />\n            <Introduction />\n            <FindMeOn />\n          </div>\n        );\n      }}\n    />\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}